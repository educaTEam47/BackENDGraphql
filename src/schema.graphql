enum Rol{
    Administrador
    Lider
    Estudiante
}
type Error{
    path:String!
    message:String!
}
"-----response-------"
type resregister{
    user:user
    register:Boolean
    error:[Error]
}
type resProject{
    Project:Project
    create:Boolean
    error:[Error]
}
type reslogin{
    login:Boolean
    token:String
    error:[Error]
}
type resUpdateUser{
    user:user
    update:Boolean
    error:[Error]
}
type resuser{
    user:user
    search:Boolean
    error:[Error]
}
type resAddStudent{
    project:Project
    add:Boolean
    error:[Error]
}
type resUpdateProject{
    Project:Project
    update:Boolean
    error:[Error]
}
type resToken{
    id:ID
    nombres:String
    rol:String
    validacion:Boolean
    error:[Error]
}
"----------Type--------"
type Project{
    _id:ID
    tittle:String
    description:String
    Horas:String
    lider:[user]
    people:[user]
}
type user{
    _id:String
    nombres:String
    apellidos:String
    email:String
    rol:String
    identificacion:String
    numIdentificacion:String
    Carrera:String
    cursos:[Project]
    Horas:Int
}
type Student{
    nombres:String
    apellidos:String
    username:String
    email:String
    password:String
    numidentificacion:Int
    cursos:[Project]
    Horas:Int
}
"---------Updates-----------"
input UpdateUser{
    nombres:String
    apellidos:String
    identificacion:String
    numIdentificacion:String
    Carrera:String
    email:String
    rol:String
}
input UpdateProject{
    tittle:String
    description:String
    Horas:String
}
"----------//Inputs--------"
input inputProject{
    tittle:String!
    description:String!
    Horas:String!
}
input inputUser{
    nombres:String!
    apellidos:String!
    username:String!
    email:String!
    password:String!
    rol:String!
}
input login{
    username:String!
    password:String!
}
type Query{
    "Van los getters"
    getUsers:[user]
    "Obtener un Usuario"
    getUser(id:ID!):resuser
    "Obtener todos los proyectos"
    getProjects:[Project]
    "Obtener solo un proyecto"
    getProject(id:ID!):Project
}

type Mutation{
    "Regsitro del Usuario"
    registro(input:inputUser!):resregister
    "Login"
    login(input:login!):reslogin
    "Validar"
    validate(token:String!):resToken
    "Crear Proyecto"
    createProject(input: inputProject!):resProject
    "Actualizar Proyecto"
    updateProject(id:ID!,input: UpdateProject!):resUpdateProject
    "Eliminar Profesor"
    delTeacher(idCourse:ID!,idTeacher:ID!):String
    "Eliminar Estudiante"
    delStudent(idProject:ID!,idStudent:ID!):String
    "Update User"
    updateUser(id:ID!,input:UpdateUser!):resUpdateUser
    "Agregar Estudiante"
    addStudent(idStudent:ID!, idProject:ID!):resAddStudent
    "Agregar Teacher"
    addTeacher(idTeacher:ID!, idProject:ID!):resAddStudent
}
