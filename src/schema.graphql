enum Rol{
    Administrador
    Lider
    Estudiante
}
type Error{
    path:String!
    message:String!
}
"-----response-------"
type resregister{
    user:user
    register:Boolean
    error:[Error]
}
type resProject{
    Project:Project
    create:Boolean
    error:[Error]
}
type reslogin{
    login:Boolean
    token:String
    error:[Error]
}
type resUpdateUser{
    user:user
    update:Boolean
    error:[Error]
}
type resuser{
    user:user
    search:Boolean
    error:[Error]
}
type resAddStudent{
    project:Project
    add:Boolean
    error:[Error]
}
type resUpdateProject{
    Project:Project
    update:Boolean
    error:[Error]
}
type resToken{
    id:ID
    email:String
    nombres:String
    rol:String
    Estado:String
    validacion:Boolean
    error:[Error]
}
type resAddNote{
    notes:notes
    add:Boolean
    response:Boolean
    calificacion:Boolean
    error:[Error]
}
type resAddResponse{
    notes:notes
    add:Boolean
    response:Boolean
}
type resnotes{
    notes:[notes]
    search:Boolean
    error:[Error]
}
type resnote{
    notes:notes
    search:Boolean
    error:[Error]
}
type resUpdateNote{
    notes:notes
    update:Boolean
    error:[Error]
}
type resNotificacion{
    send:Boolean
    error:[Error]
}
type resSolicitud{
    estado:Boolean
    error:[Error]
}
type resDelSolicitud{
    message:String
    estado:Boolean
    error:[Error]
}
type resSolicitudes{
    solicitudes:[solicitud]
}
"----------Type--------"
type solicitud{
    email:String
    project:[Project]
}
type estadoNote{
    note:ID
    estado:Boolean
}
type notes{
    _id:ID
    project:Project
    teacher:user
    student:[user]
    note:String
    description:String
    response:[response]
    calificacion:String
}
type response{
    teacher:String
    student:String
    response:String
    fecha:String
}
type Project{
    _id:ID
    tittle:String
    description:String
    Horas:String
    lider:[user]
    people:[user]
    notes:[notes]
}
type user{
    _id:String
    nombres:String
    apellidos:String
    email:String
    rol:String
    identificacion:String
    numIdentificacion:String
    Carrera:String
    cursos:[Project]
    Horas:Int
    Estado:String
    EstadoNote:[estadoNote]
}
type Student{
    nombres:String
    apellidos:String
    username:String
    email:String
    password:String
    numidentificacion:Int
    cursos:[Project]
    Horas:Int
}
"---------Updates-----------"
input UpdateUser{
    nombres:String
    apellidos:String
    identificacion:String
    numIdentificacion:String
    Carrera:String
    email:String
    rol:String
    Estado:String
}
input UpdateProject{
    tittle:String
    description:String
    Horas:String
}
"----------//Inputs--------"
input inputProject{
    tittle:String!
    description:String!
    Horas:String!
}
input inputUser{
    nombres:String!
    apellidos:String!
    username:String!
    email:String!
    password:String!
    rol:String!
}
input login{
    username:String!
    password:String!
}
input inputNotes{
    project:String
    teacher:String
    student:String
    note:String
    description:String
    calificacion:String
}
input inputResponse{
    teacher:String
    student:String
    response:String
    fecha:String
}
input inputNotificacion{
    estado:Boolean
    note:ID
}
"------###################-----------------"
type Query{
    "Van los getters"
    getUsers:[user]
    "Obtener un Usuario"
    getUser(email:String!):resuser
    getUserByEmail(Email:String!):resuser
    "Obtener todos los proyectos"
    getProjects:[Project]
    "Obtener solo un proyecto"
    getProject(id:ID!):Project
    "Obtener Notas"
    getNote(idProject:ID!):resnotes
    "Obtener Nota"
    getNot(idNote:ID!):resnote
    "Obtener solicitudes"
    getSolicitudes(idProject:ID!):resSolicitudes
}

type Mutation{
    "Regsitro del Usuario"
    registro(input:inputUser!):resregister
    "Login"
    login(input:login!):reslogin
    "Validar"
    validate(token:String!):resToken
    "Crear Proyecto"
    createProject(email:String!,input: inputProject!):resProject
    "Actualizar Proyecto"
    updateProject(id:ID!,input: UpdateProject!):resUpdateProject
    "Eliminar Profesor"
    delTeacher(idCourse:ID!,email:String!):String
    "Eliminar Estudiante"
    delStudent(idProject:ID!,email:String!):String
    "Update User"
    updateUser(email:String!,input:UpdateUser!):resUpdateUser
    "Agregar Estudiante"
    addStudent(email:String!, idProject:ID!):resAddStudent
    "Agregar Teacher"
    addTeacher(email:String!, idProject:ID!):resAddStudent
    "Agregar Nota"
    addNote(email:String!, idProject:ID!, input:inputNotes!):resAddNote
    "Agregar respuesta"
    addResponse(email:String!,idnote:ID!,input:inputResponse):resAddResponse
    "Eliminar Nota"
    delNote(idNote:ID!):String
    "Eliminar Curso"
    delCourse(idProject:ID!):String
    "Actualizar Nota"
    updateNote(idNote:ID!,input:inputNotes! ):resUpdateNote
    "Enviar Notificacion"
    addNotificacion(email:String!,input:inputNotificacion!):resNotificacion
    "Actualizar Notificacion"
    updateNoti(email:String!,input:inputNotificacion!):String
    "Solicitudes"
    solicitudes(idProject:ID!,email:String):resSolicitud
    "Eliminar Solictud"
    delSolicitud(idProject:ID!,email:String):resDelSolicitud
}
